@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.NewsItemPage>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Cms.Core.Services;
@using Umbraco.Cms.Core.Models.PublishedContent;
@inject IUserService UserService
@{
	Layout = "_LayoutWithBreadcrumb.cshtml";
	var userService = UserService;
	var image = Model.Value<IPublishedContent>("newsImage");
	
	
	var selection = Umbraco.Content(Guid.Parse("bb9e3502-3e2b-4bef-abc9-ba32636eac5b"))
    .ChildrenOfType("newsItemPage")
    .Where(x => x.IsVisible())
    .OrderByDescending(x => x.UpdateDate);
    
    var selection4 = Umbraco.Content(Guid.Parse("bb9e3502-3e2b-4bef-abc9-ba32636eac5b"))
    .ChildrenOfType("newsItemPage")
    .Where(x => x.IsVisible())
    .OrderByDescending(x => x.UpdateDate)
    .Take(4);
    
    var uniqueCategories = Umbraco.Content(Guid.Parse("bb9e3502-3e2b-4bef-abc9-ba32636eac5b"))
        .ChildrenOfType("newsItemPage")
        .Where(x => x.IsVisible())
        .Select(x => x.Value<string>("newsCategory"))
        .Where(x => !string.IsNullOrEmpty(x))
        .Distinct()
        .ToList();

    var categoryCounts = Umbraco.Content(Guid.Parse("bb9e3502-3e2b-4bef-abc9-ba32636eac5b"))
        .ChildrenOfType("newsItemPage")
        .Where(x => x.IsVisible())
        .SelectMany(x => x.Value<string>("newsCategory").Split(','))
        .Where(x => !string.IsNullOrEmpty(x))
        .GroupBy(x => x.Trim())
        .ToDictionary(x => x.Key, x => x.Count());

    var renderedCategories = new HashSet<string>();
}

<section class="news-details-section">
    <div class="news-details-container">
        <div class="news-details-headline-content">
            <h1>@Model.Name</h1>
            <div class="news-details-headline-info">
                <p class="dot-1">@Model.CreateDate.ToString("MMM dd, yyyy")</p>
                <div class="yellow-dot dot-2"></div>
                <p class="dot-3">@Model.Value("newsCategory")</p>
                <div class="yellow-dot dot-4"></div>
                <p class="dot-5">@Model.CreatorName(UserService)</p>
            </div>
        </div>
        <div class="news-details-container-content">
            <div class="news-details-content">
                <img src="@image.Url()" alt="Kimberly Hansen">
                @Model.Value("newsContent")
                <div class="news-details-content-buttons">
                    
                    @foreach (var tag in Model.Value<IEnumerable<string>>("newsTags"))
                    {
                        <button>@tag</button>
                    }
                    
                </div>
            </div>
            <div class="news-details-right-side">
                <div class="search-bar-news">
                    <i class="fa-solid fa-magnifying-glass"></i>
                    <input type="text" id="name" name="name" placeholder="Type to search...">
                </div>
                <div class="recent-posts">
                    <h3>Recent Posts</h3>
                    <div class="headline-line"></div>
                    
                    @foreach (var item in selection4)
                    {
                        <div class="post">
                            <h6>@item.Name</h6>
                            <p>@item.CreateDate.ToString("MMM dd, yyyy")</p>
                            <div class="post-line"></div>
                        </div>
                    }
                    
                </div>
                <div class="news-details-category">
                    <h3>Categories</h3>
                    <div class="headline-line"></div>
                    
                    @foreach (var item in selection)
                    {
                        var newsCategoriesForItem = item.Value<string>("newsCategory")?.Split(',').Select(x => x.Trim()).Where(x => !string.IsNullOrEmpty(x));
                        if (newsCategoriesForItem != null)
                        {
                            foreach (var category in newsCategoriesForItem)
                            {
                                if (!renderedCategories.Contains(category)) // Kontrollera om kategorin redan har renderats
                                {
                                    renderedCategories.Add(category); // Lägg till kategorin i den redan renderade HashSet
                                    <div class="category">
                                        <p class="cate">@category</p>
                                        <p class="post">- @(categoryCounts.ContainsKey(category) ? categoryCounts[category] : 0) Posts</p>
                                    </div>
                                }
                            }
                        }
                    }
                                        
                </div>
            </div>
        </div>
    </div>
</section>